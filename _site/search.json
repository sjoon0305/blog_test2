[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/PINN0104.html",
    "href": "posts/PINN0104.html",
    "title": "PINN 01/04",
    "section": "",
    "text": "신경망-몇개의 층, 은닉 unit, 학습률, 활성화 함수 처음에는 완벽히 예측하는것은 불가능\n\n\n처음엔 아이디어, 코드를 작성, 설정이 잘 되는지 실험  위과정 반복\n\n사이클을 얼마나 효율적으로 도는지\n훈련세트/교차 검증 세트/테스트 세트 데이터를 이렇게 분할 뒤 두개가 점점 작아지는 추세 엄청 큰 데이터셋일때 98 1 1 훈련셋과 테스트 셋은 같은 분포를 가져는 것이 좋다! 위 규칙을 따를수록 알고리즘 발달\n비편향 추정이 필요없는 경우 테스트 셋이 없어도 됨 훈련 개발 개발을 테스트 셋으로 사용(과적합 조심)\nW1-2 편향 bias 분산 variance 과대적합\nW1-3 알고리즘의 편향과 분산을 확인\n더 많은 은닉유닛 or 은닉층 or 더 오랜 시간 훈련 or 다른 발전되 최적화 알고리즘\n\n\n편향 문제를 해결할때까지 사이클을 반복 훈련 데이터를 더 얻는 것은 도움이 안된다\n\n\n편향 문제를 어느 정도 해결 -&gt; 분산 문제를 확인\n\n\n현대에 와서 더 큰 네트워크의 훈련은 편향을 감소시키고 많은 데이터를 얻는 것이 분산을 감소 즉, 편향과 분산의 균형을 유지할 수 있다"
  },
  {
    "objectID": "posts/PINN0104.html#w1-1-머신러닝-문제-해결",
    "href": "posts/PINN0104.html#w1-1-머신러닝-문제-해결",
    "title": "PINN 01/04",
    "section": "",
    "text": "신경망-몇개의 층, 은닉 unit, 학습률, 활성화 함수 처음에는 완벽히 예측하는것은 불가능\n\n\n처음엔 아이디어, 코드를 작성, 설정이 잘 되는지 실험  위과정 반복\n\n사이클을 얼마나 효율적으로 도는지\n훈련세트/교차 검증 세트/테스트 세트 데이터를 이렇게 분할 뒤 두개가 점점 작아지는 추세 엄청 큰 데이터셋일때 98 1 1 훈련셋과 테스트 셋은 같은 분포를 가져는 것이 좋다! 위 규칙을 따를수록 알고리즘 발달\n비편향 추정이 필요없는 경우 테스트 셋이 없어도 됨 훈련 개발 개발을 테스트 셋으로 사용(과적합 조심)\nW1-2 편향 bias 분산 variance 과대적합\nW1-3 알고리즘의 편향과 분산을 확인\n더 많은 은닉유닛 or 은닉층 or 더 오랜 시간 훈련 or 다른 발전되 최적화 알고리즘\n\n\n편향 문제를 해결할때까지 사이클을 반복 훈련 데이터를 더 얻는 것은 도움이 안된다\n\n\n편향 문제를 어느 정도 해결 -&gt; 분산 문제를 확인\n\n\n현대에 와서 더 큰 네트워크의 훈련은 편향을 감소시키고 많은 데이터를 얻는 것이 분산을 감소 즉, 편향과 분산의 균형을 유지할 수 있다"
  },
  {
    "objectID": "posts/PINN0104.html#w-1-4-정규화",
    "href": "posts/PINN0104.html#w-1-4-정규화",
    "title": "PINN 01/04",
    "section": "W 1-4 정규화",
    "text": "W 1-4 정규화\n높은 분산일때 정규화를 통해 과적합을 막고 신경망의 분산을 줄임 - 1. 로지스틱 회귀 J(w,b)에 regulation parameter λ 를 추가하여 w에 대해 정규화 w는 꽤 높은 차원의 매개변수 벡터이기 때문 L2 regulation: t(w)*t\n\n\nNeural network"
  },
  {
    "objectID": "posts/PINN0104.html#w-1-5-정규화가-어떻게-과적합을-막는지",
    "href": "posts/PINN0104.html#w-1-5-정규화가-어떻게-과적합을-막는지",
    "title": "PINN 01/04",
    "section": "W 1-5 정규화가 어떻게 과적합을 막는지",
    "text": "W 1-5 정규화가 어떻게 과적합을 막는지\n\nλ를 최소화해서 가중치 행렬 w를 0에 상당히 가깝게 설정하여 로지스틱 회귀에 가까운 네트워크 형성\n은닉 유닛의 영향을 줄이고 간단하고 작은 신경망을 만듬"
  },
  {
    "objectID": "posts/PINN0104.html#w1-6-drop-out-정규화-기법",
    "href": "posts/PINN0104.html#w1-6-drop-out-정규화-기법",
    "title": "PINN 01/04",
    "section": "W1-6 Drop out 정규화 기법",
    "text": "W1-6 Drop out 정규화 기법\n\n\n신경망의 각각의 층에 노드를 삭제하는 확률을 설정함\n\n\n삭제된 노드의 링크를 모두 삭제\n\n\na3 삭제될 확률 d3(True or False)를 곱한 값, 기대값을 맞추기 위해 /keep-prob로 나눔"
  },
  {
    "objectID": "posts/PINN0104.html#w1-7-dropout이-정규화로-잘-작동하는-이유",
    "href": "posts/PINN0104.html#w1-7-dropout이-정규화로-잘-작동하는-이유",
    "title": "PINN 01/04",
    "section": "W1-7 Dropout이 정규화로 잘 작동하는 이유",
    "text": "W1-7 Dropout이 정규화로 잘 작동하는 이유\n\n더 작은 신경망이 분산을 작게함\n1차원 신경망의 경우 가중치를 분산시켜 가중치의 노름의 제곱값을 줄어들게 함\n드롭아웃은 L2 정규화와 비슷한 효과를 보여줌\n복잡한 층은 낮은 keep-prob, 단순한 층은 높은 keep-prob\n입력층에는 0.9또는 1\n비용함수가 잘 정의되지 않음"
  },
  {
    "objectID": "posts/PINN0104.html#w1-8-정규화의-여러-방법들",
    "href": "posts/PINN0104.html#w1-8-정규화의-여러-방법들",
    "title": "PINN 01/04",
    "section": "W1-8 정규화의 여러 방법들",
    "text": "W1-8 정규화의 여러 방법들\n\n\n훈련셋의 무작위적인 왜곡과 변형으로 훈련셋을 늘릴 수도 있음\n\n\nEarly stopping : data set error 가 꺾이는 점에서 학습을 끝냄\n\nw는 반복을 거듭할 수록 커짐 그래서 w에 대해 더 작은 노름을 갖을 때 반복을 멈춤\n비용함수를 잘 줄이지 못함"
  },
  {
    "objectID": "posts/PINN0104.html#w1-9-입력의-정규화",
    "href": "posts/PINN0104.html#w1-9-입력의-정규화",
    "title": "PINN 01/04",
    "section": "W1-9 입력의 정규화",
    "text": "W1-9 입력의 정규화\n\n신경망의 훈련을 빠르게 할 수 있다.\n\n평균을 뺀다\n\n\n정규화\n\n훈련셋과 테스트셋은 똑같이 정규화한다"
  },
  {
    "objectID": "posts/PINN0104.html#w1-10-vanishingexploding-gradients",
    "href": "posts/PINN0104.html#w1-10-vanishingexploding-gradients",
    "title": "PINN 01/04",
    "section": "W1-10 Vanishing/Exploding Gradients",
    "text": "W1-10 Vanishing/Exploding Gradients\n\n1.5 or 0.5 이면 매우 깊은 네트워크의 경우 활성값이 기하급수적 증가 또는 감소"
  },
  {
    "objectID": "posts/PINN0104.html#w1-11-weight-initialization-가중치-초기화",
    "href": "posts/PINN0104.html#w1-11-weight-initialization-가중치-초기화",
    "title": "PINN 01/04",
    "section": "W1-11 Weight Initialization 가중치 초기화",
    "text": "W1-11 Weight Initialization 가중치 초기화\n\n가중치 초기화를 통해 경사 소실/급증을 막을 수 있다"
  },
  {
    "objectID": "posts/PINN0104.html#w1-14-grad-check",
    "href": "posts/PINN0104.html#w1-14-grad-check",
    "title": "PINN 01/04",
    "section": "W1-14 Grad check",
    "text": "W1-14 Grad check\n\n\ndseta에 가깝게 함\n\n정규화를 한다\n드롭아웃 사용하지 않는다\nw와\n\n\n1+1\n\n2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About ME",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "목차",
    "section": "",
    "text": "PINN 01/04\n\n\n\n\n\n\ngrad School\n\n\n\n\n\n\n\n\n\nJan 4, 2024\n\n\n유성준\n\n\n\n\n\n\n\n\n\n\n\n\n나의 블로그 만들기 도전기 Day1\n\n\n\n\n\n\nQuarto\n\n\n\n\n\n\n\n\n\nJan 3, 2024\n\n\n유성준\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 3, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nDec 31, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Day1.html#github의-파일-수정하기",
    "href": "posts/Day1.html#github의-파일-수정하기",
    "title": "나의 블로그 만들기 도전기 Day1",
    "section": "1. Github의 파일 수정하기",
    "text": "1. Github의 파일 수정하기\n깃헙에서 gitprac 레지스토리 생성\n1-1.윈도우 터미널에서 파일 수정\n\ngit clone https://github.com/sjoon0305/gitprac.git\ncd gitprac # 가져온 레지스토리 폴더를 열어 준 뒤, readme 파일이나 다른 파일을 수정한다.\ngit config –global user.email “you@example.com”\ngit config –global user.name “Your Name” # 이 두 코드로 나를 인식\ngit add .\ngit commit -m .\ngit push # 처음에 윈도우에서 깃헙 로그인 창이 뜬다\n\n1-2. Github의 codespaces의 terminal에서 직접 수정\n\n코드스페이스에서 파일을 직접 열어서 수정한다\nmkdir,ls 등등 사용\nrm -rf 폴더명 # 폴더와 안에 있는 파일들까지 모두 삭제\nrm test.txt # 일반 파일 삭제\n\ngit add .\ngit commit -m .\ngit push"
  },
  {
    "objectID": "posts/Day1.html#메모장",
    "href": "posts/Day1.html#메모장",
    "title": "나의 블로그 만들기 도전기 Day1",
    "section": "2. 메모장",
    "text": "2. 메모장\n\n터미널에서 vi는 메모장을 의미\nvi ttt.txt # 없으면 새로 만들고 있으면 기존의 파일을 연다\n\n명령어\n\ni # 메모를 수정한다\nesc # 수정하고 있는것을 나가기\n:w 저장\n:q 나가기\n:wq 가능\ne,b 좌우 이동\n/찾을단어 # ctrl F 기능 n과 shift n으로 이동이 가능하다"
  },
  {
    "objectID": "posts/Day1.html#원격접속",
    "href": "posts/Day1.html#원격접속",
    "title": "나의 블로그 만들기 도전기 Day1",
    "section": "3. 원격접속",
    "text": "3. 원격접속\n\n기본 터미널에서 시작\nssh username@ip주소\nex) ssh toolbox@210.117.173.182\npass:jbnu # 입력이 보이지 않는다\ncd, vi 등등을 이용하여 터미널에서 메모를 수정한다\n원격접속 나가기: crtl+D"
  },
  {
    "objectID": "posts/Day1.html#블로그-생성-엄청-어려워-보이지만-사실-할만할지도..",
    "href": "posts/Day1.html#블로그-생성-엄청-어려워-보이지만-사실-할만할지도..",
    "title": "나의 블로그 만들기 도전기 Day1",
    "section": "4. 블로그 생성! 엄청 어려워 보이지만 사실 할만할지도..?",
    "text": "4. 블로그 생성! 엄청 어려워 보이지만 사실 할만할지도..?\n4-1. 윈도우 터미널\n\n우선 윈도우에 쿼토를 다운로드\nclone을 할 레지스토리 생성 후 불러오기\n해당 레지스토리의 파일 연다(cd blog_test)\n\n\nquarto create-project –type website:blog\ngit add .\ngit commit -m .\ngit push\nquarto publish gh-pages\n\n4-2. 해당 레지스토리의 codespaces\n\n우선 위에 검색창에서 &gt;jupyter lab으로 파이썬 파일 만들기\n파이썬 확장 설치하기\n추천 확장 python+jupyter\n파이썬 커널 선택\nipynb 파일을 posts 폴더에 넣어주고 raw, 마크다운과 Python 셀을 만들어가며 블로그를 꾸민다.\n\n코드스페이스에서는 쿼토가 다운되지 않은 상태이므로 코드를 불러와 쿼토를 다운로드한다.\n\npip install git+https://github.com/quarto-dev/quarto-cli\n참고 url: Quarto 홈페이지\n\n수정된 파일 내보내기(블로그를 만드는 것이기에 시간이 조금 걸린다. action에서 확인 가능)\n\ngit add .\ngit commit -m .\ngit push\nquarto publish –no-browser –no-prompt\n\nquarto publish –no-browser –no-prompt"
  },
  {
    "objectID": "posts/Day1.html#주의할-점과-궁금한-점",
    "href": "posts/Day1.html#주의할-점과-궁금한-점",
    "title": "나의 블로그 만들기 도전기 Day1",
    "section": "5. 주의할 점과 궁금한 점",
    "text": "5. 주의할 점과 궁금한 점\n\n기존의 codespace를 쓰면 번거로움이 덜하다(쿼토 다운로드, 확장설치, 커널 선택 등을 다시할 필요가 없다)\n하지만 만약 레지스토리의 파일이 변경 됐을때는 변경된 파일을 불러오지 못한다 이건 어떻게 해결해야지?\ncodespaces에서 그림을 가져오는 방법을 찾지 못해 윈도우에서 클론을 한뒤 그림 파일을 폴더에 첨부해서 가져왔다. 그럼 codespace에서 그림을 가져올 수 있을까?\n기존 코드 스페이스에서는 수정된 파일을 읽지 못했는데 이때 클론을 써야할까?\n윈도우 터미널에서는 파일이 변경 돼서 클론을 불러올때 기존의 폴더가 있으면 불러오지 못한다 파일을 삭제후 클론을 불러와야한다.\n\n\na=[1,2,3]\na+[5]\n\n[1, 2, 3, 5]"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  }
]